""" Approach: Optimize solution 5 by preprocessing input to remove unproductive
jumps.

ABANDONED: tuples is too hard to code around - use negative numbers to represent things I want to skip

"""
import pdb
from typing import List, Tuple


class Solution:
    def jump(self, nums: List[int]) -> int:
        if len(nums) == 0 or len(nums) == 1:
            return 0

        # don't look back further than the biggest number
        # TODO: this was a cheap hack and falls apart when numbers are large
        max_lookback = max(nums) * -1
        print(f'max_lookback: {max_lookback}')

        master_list_pairs = gen_master_pairs(nums)
        print(f'done generation: original list - {len(nums)}    new list - {len(master_list_pairs)}')

        # paths through master list composed of indexes
        paths: List[List] = [[len(nums)-1]]

        while True:

            new_paths = {}
            while paths:
                """
                For each path, take the lowest indexed "stop" on the path and
                create a new path for any lower indexed "stops" that can reach
                it
                """
                path = paths.pop()
                target_idx = path[-1]
                # iterate through all lower "stops"
                for pair in master_list_pairs:
                    idx = pair[1]
                    dist = pair[0]
                    if idx >= target_idx:
                        # TODO: what if we hit this scenario? that means end is unreachable
                        break
                    if idx + dist >= target_idx:
                        if idx == 0:
                            # We've reached the beginning of the list. Success.
                            return len(path)

                        # This "stop" can reach the target in 1 step so append
                        # a new path
                        if idx not in new_paths:
                            new_paths[idx] = path + [idx]
                        else:
                            if len(path) + 1 < len(new_paths[idx]):
                                new_paths[idx] = path + [idx]

            for _, path in new_paths.items():
                paths.append(path)


def gen_master_pairs(master_list: List[int]) -> List[Tuple]:
    index_list = list(range(0, len(master_list)))
    all_pairs = list(zip(master_list, index_list))
    # pdb.set_trace()
    return all_pairs

    dominant_pairs = [all_pairs[0]]
    for i in range(1, len(all_pairs)):
        pair = all_pairs[i]
        # if pair is not encapsulated in a dominant pair, then add to dominant pairs
        pair_is_dominant = True
        for d_pair in dominant_pairs:
            if pair[1] > d_pair[1] and d_pair[1] + d_pair[0] >= pair[1] + pair[0]:
                pair_is_dominant = False
                break
        if pair_is_dominant:
            dominant_pairs.append(pair)
        # pdb.set_trace()

    return dominant_pairs


print(f'******** RUNNING TESTS')

s = Solution()

input_list = [8,2,4,4,4,9,5,2,5,8,8,0,8,6,9,1,1,6,3,5,1,2,6,6,0,4,8,6,0,3,2,8,7,6,5,1,7,0,3,4,8,3,5,9,0,4,0,1,0,5,9,2,0,7,0,2,1,0,8,2,5,1,2,3,9,7,4,7,0,0,1,8,5,6,7,5,1,9,9,3,5,0,7,5]
expected = 13
res = s.jump(input_list)
assert res == expected, f'{res} is not min number of jumps'
"""

input_list = [8,4,8,2,5,6,5,3,5,3,3,1,6,5,8,7,4,6,8,2,3,1,2,7,5,1,2,1,8,1,3,3,7,8,8,4,2,6,5,1,7,5,6,8,2,7,5,6,7,2,2,5,7,4,4,6,8,7,2,4,8,5,2,3,6,3,5,1,6,8,3,1,7,7,1,8,2,3,5,8,6,5,3,4,1,8,7,3,7,2,1,1,2,8,5,1,8,3,5,5,3,3,8,8,1,6,1,8,5,1,1,6,6,1,8,4,2,3,4,6,4,8,6,7,8,6,2,3,2,6,7,1,3,4,1,5,5,3,6,5,1,5,5,1,1,1,4,2,5,2,6,1,5,3,5,3,7,6,7,7,1,1,6,3,5,2,6,7,5,8,2,1,2,1,4,7,3,6,7,2,7,1,6,4,4,6,6,6,6,3,4,5,5,1,5,3,5,7,3,4,5,3,1,3,7,6,2,2,5,7,7,6,3,4,2,5,4,1,3,3,6,2,1,1,3,5,7,4,5,4,8,4,5,7,6,7,5,5,5,4,1,6,1,6,6,3,1,8,6,3,8,5,8,7,6,8,4,5,1,5,7,7,1,3,5,5,4,1,4,8,2,5,5,6,3,4,8,1,5,4,1,8,2,6,5,4,8,8,5,7,1,8,4,1,5,5,7,1,6,5,8,4,3,3,8,7,1,4,3,1,4,5,2,7,8,3,4,4,6,7,7,5,4,3,2,4,2,5,2,6,8,8,2,7,8,2,6,8,5,6,3,3,4,2,3,1,4,1,8,8,2,5,2,1,5,8,2,8,2,4,6,8,6,6,6,5,6,8,5,7,2,1,5,2,8,8,7,1,1,5,2,5,6,6,3,8,3,5,6,4,5,7,8,2,6,7,4,5,7,3,8,2,4,5,1,8,7,5,2,8,1,7,1,3,1,1,4,4,1,1,3,3,3,8,1,8,4,5,4,7,1,1,2,6,7,5,8,8,1,3,8,2,7,4,8,8,1,2,5,5,5,7,4,2,2,4,6,7,6,4,3,5,8,1,7,6,6,2,1,6,2,5,2,8,3,3,5,7,2,1,8,5,5,6,8,8,8,8,1,3,5,2,1,6,3,8,4,7,8,2,8,4,2,4,8,4,2,4,6,3,7,2,1,3,5,2,5,4,7,8,7,6,3,3,7,6,2,4,6,7,8,6,6,4,2,8,7,5,5,8,8,8,1,2,6,1,8,1,1,4,2,7,8,5,6,4,7,3,7,3,2,6,5,7,8,5,1,3,3,3,6,8,7,3,3,4,7,5,8,2,4,7,8,1,6,8,7,5,4,2,3,3,8,8,6,3,8,2,8,6,2,2,5,8,3,7,5,8,5,7,2,7,1,7,2,3,1,1,8,2,4,8,8,1,2,1,2,2,8,6,6,5,1,1,1,5,1,8,5,6,1,4,4,8,5,8,3,3,3,5,2,5,3,7,3,5,4,3,2,4,8,7,6,4,4,4,3,8,7,8,2,4,6,5,6,3,4,5,3,2,6,6,7,2,5,1,5,6,2,3,4,3,3,3,3,2,4,3,7,1,3,5,3,2,5,5,7,6,1,2,3,2,3,8,3,6,7,4,3,8,3,7,2,7,5,2,6,8,2,5,1,2,8,7,8,3,1,1,7,3,6,5,7,2,8,3,3,7,2,3,7,6,1,8,4,5,3,3,8,5,1,1,7,3,6,1,7,6,2,2,6,1,6,8,1,7,4,1,3,4,6,6,4,4,3,4,4,7,5,2,2,8,7,6,5,4,3,2,8,8,2,1,3,5,7,5,2,4,7,2,2,8,3,8,7,4,8,5,3,3,5,5,2,1,7,6,7,1,3,3,2,2,8,8,6,2,8,3,2,3,8,6,4,7,7,8,2,3,6,4,8,3,3,2,1,7,6,3,8,4,8,3,1,6,3,1,2,8,8,2,2,7,2,5,7,3,5,8,8,3,8,6,6,2,6,6,4,7,6,1,7,8,6,8,1,2,3,3,6,2,7,1,2,1,1,6,8,6,6,1,2,6,8,2,4,7,1,1,3,3,7,4,8,3,4,6,3,6,1,6,4,3,6,7,4,8,5,7,2,3,1,5,3,5,3,3,3,6,8,6,6,8,3,8,3,6,2,6,4,1,6,8,1,1,6,6,6,3,6,4,7,1,1,4,2,5,5,8,2,6,8,1,7,5,4,7,4,7,3,1,5,7,1,5,1,1,8,2,2,3,3,4,3,7,6,1,7,2,8,5,6,5,4,8,2,4,3,1,2,7,3,3,3,3,4,6,2,1,4,8,1,4,3,2,7,6,8,8,7,2,3,1,4,1,3,3,8,8,6,2,3,3,7,3,1,5,5,2,8,8,3,7,7,7,7,3,7,3,7,4,5,5,8,4,8,1,4,3,7,8,5,7,1,6,2,4,3,6,5,7,2,7,5,1,1,6,3,3,7,7,7,4,6,7,2,3,2,8,5,7,8,7,2,7,7,8,7,3,4,4,5,3,6,2,2,1,4,8,5,1,2,8,4,7,8,2,1,4,4,6,5,6,2,2,6,3,1,8,1,3,3,3,8,1,3,7,7,5,8,3,7,3,8,3,7,8,2,1,4,4,2,7,3,8,1,8,4,8,8,6,6,8,5,2,6,2,3,6,1,5,2,4,6,5,6,8,3,8,2,1,8,6,8,3,2,4,3,4,7,5,6,6,6,4,8,1,5,6,1,1,2,6,4,3,2,1,2,4,1,4,4,8,2,8,8,2,1,2,4,4,5,1,5,5,6,2,4,8,4,7,3,4,2,5,7,7,3,5,5,8,5,7,5,4,4,6,5,6,5,2,5,7,4,3,5,8,3,7,3,7,3,7,5,8,4,3,3,4,6,1,3,3,6,2,4,5,4,4,8,4,6,5,1,1,2,4,7,3,8,8,1,2,3,6,7,7,4,5,3,5,7,3,4,8,8,6,6,2,3,3,8,3,1,3,3,2,8,3,5,7,2,6,2,7,3,3,3,7,5,1,2,7,8,4,7,1,4,6,5,1,2,6,3,7,7,5,4,8,7,1,1,7,2,4,7,8,5,2,6,6,5,4,8,6,1,4,5,5,3,7,4,4,2,3,6,8,6,8,4,1,8,2,3,8,3,1,6,2,8,6,1,4,3,4,8,6,6,5,8,7,4,2,1,3,7,6,7,1,3,2,2,8,1,5,2,6,7,8,2,8,5,2,3,7,7,6,8,3,4,6,8,2,8,7,1,4,1,3,6,1,8,2,8,6,8,7,1,2,5,6,5,3,4,7,5,3,4,8,4,8,3,2,7,7,6,2,4,8,1,1,2,8,6,6,2,2,4,3,8,6,7,7,1,8,7,2,2,3,2,4,1,2,6,3,6,8,5,1,6,4,7,4,2,4,5,6,8,3,7,1,5,2,8,1,2,6,3,5,4,3,3,8,2,7,1,2,1,1,8,7,6,3,8,2,8,4,2,1,1,2,3,8,8,6,5,4,1,5,5,7,8,2,8,6,6,3,7,1,5,2,2,5,2,6,5,7,3,2,8,7,8,3,7,6,5,6,7,3,4,1,3,2,3,6,4,6,1,1,8,3,2,2,1,1,4,3,4,6,6,2,8,1,6,6,1,1,6,8,8,6,4,8,3,4,5,5,5,8,8,5,8,2,1,4,6,6,7,3,6,8,4,3,4,6,3,7,8,6,1,7,1,5,1,1,6,3,3,3,7,4,1,3,1,5,1,5,4,3,4,4,6,2,3,8,0,0,0,0,0,0,0]
expected = 284
res = s.jump(input_list)
assert res == expected, f'{res} is not min number of jumps'
"""
